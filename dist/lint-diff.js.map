{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./lib/functional.js","webpack:///./lib/git.js","webpack:///./lint-diff.js","webpack:///external \"bluebird\"","webpack:///external \"eslint\"","webpack:///external \"execa\"","webpack:///external \"meow\"","webpack:///external \"path\"","webpack:///external \"ramda/src/T\"","webpack:///external \"ramda/src/addIndex\"","webpack:///external \"ramda/src/assoc\"","webpack:///external \"ramda/src/complement\"","webpack:///external \"ramda/src/cond\"","webpack:///external \"ramda/src/curry\"","webpack:///external \"ramda/src/curryN\"","webpack:///external \"ramda/src/defaultTo\"","webpack:///external \"ramda/src/endsWith\"","webpack:///external \"ramda/src/equals\"","webpack:///external \"ramda/src/evolve\"","webpack:///external \"ramda/src/filter\"","webpack:///external \"ramda/src/find\"","webpack:///external \"ramda/src/flatten\"","webpack:///external \"ramda/src/insert\"","webpack:///external \"ramda/src/isEmpty\"","webpack:///external \"ramda/src/map\"","webpack:///external \"ramda/src/objOf\"","webpack:///external \"ramda/src/pipe\"","webpack:///external \"ramda/src/pipeP\"","webpack:///external \"ramda/src/pluck\"","webpack:///external \"ramda/src/prop\"","webpack:///external \"ramda/src/propEq\"","webpack:///external \"ramda/src/reduce\"","webpack:///external \"ramda/src/slice\"","webpack:///external \"ramda/src/split\"","webpack:///external \"ramda/src/startsWith\"","webpack:///external \"ramda/src/sum\"","webpack:///external \"ramda/src/tap\"","webpack:///external \"ramda/src/uniq\""],"names":["cli","flags","ext","type","formatter","alias","input","mapIndexed","reduceIndexed","firstItemStartsWith","prefix","list","doesNotStartWith","splitEveryTime","predicate","splitIndexes","acc","item","index","length","split","splitIndex","i","splitIndexList","previousIndex","currentIndex","getChangedLinesFromHunk","hunk","lineNumber","reduce","changedLines","line","Number","match","getHunksFromDiff","getChangedLinesFromDiff","linter","CLIEngine","extensions","getChangedFiles","commitRange","some","file","path","resolve","getDiff","filename","then","getChangedFileLineMap","filePath","lintChangedLines","executeOnFiles","bind","filterLinterMessages","linterOutput","filterMessagesByFile","result","fileLineMap","changedFileLineMap","filterMessages","messages","includes","message","fixCounts","errorCount","warningCount","fixableErrorCount","fixableWarningCount","forEach","fatal","severity","fix","Object","assign","applyLinter","logResults","console","log","results","getErrorCountFromReport","exitProcess","process","exit","n","reportResults","run","_extensions","_formatter","getFormatter","Promise","map"],"mappings":"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","file":"lint-diff.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","import meow from 'meow'\nimport run from './lint-diff'\n\nconst cli = meow(`\n  Usage\n    $ lint-diff [<diff-input>]\n\n  Examples\n    $ lint-diff\n    $ lint-diff HEAD~1..HEAD\n    $ lint-diff master..my-branch\n`, {\n  flags: {\n    ext: { type: 'string' },\n    formatter: { type: 'string', alias: 'f' },\n  },\n})\n\nrun(cli.input[0], cli.flags.ext, cli.flags.formatter)\n","import {\n  addIndex,\n  complement,\n  curry,\n  defaultTo,\n  filter,\n  insert,\n  isEmpty,\n  map,\n  pipe,\n  reduce,\n  slice,\n  startsWith,\n} from 'ramda'\n\nexport const mapIndexed = addIndex(map)\n\nexport const reduceIndexed = addIndex(reduce)\n\nexport const firstItemStartsWith = curry((prefix, list) =>\n  startsWith(prefix, list[0]))\n\nexport const doesNotStartWith = complement(startsWith)\n\nexport const splitEveryTime = curry((predicate, list) => {\n  const splitIndexes = pipe(\n    reduceIndexed((acc, item, index) => {\n      if (predicate(item)) {\n        return [...acc, index]\n      }\n\n      return acc\n    }, []),\n    insert(list.length - 1, list.length)\n  )(list)\n\n  const split = mapIndexed((splitIndex, i, splitIndexList) => {\n    const previousIndex = defaultTo(0, splitIndexList[i - 1])\n    const currentIndex = splitIndexList[i]\n\n    return slice(previousIndex, currentIndex, list)\n  })\n\n  return pipe(\n    split,\n    filter(complement(isEmpty))\n  )(splitIndexes)\n})\n","import {\n  filter,\n  flatten,\n  map,\n  pipe,\n  split,\n  startsWith,\n  uniq,\n} from 'ramda'\nimport {\n  doesNotStartWith,\n  firstItemStartsWith,\n  splitEveryTime,\n} from './functional'\n\nexport const getChangedLinesFromHunk = (hunk) => {\n  let lineNumber = 0\n\n  return hunk.reduce((changedLines, line) => {\n    if (startsWith('@@', line)) {\n      lineNumber = Number(line.match(/\\+([0-9]+)/)[1]) - 1\n      return changedLines\n    }\n\n    if (doesNotStartWith('-', line)) {\n      lineNumber += 1\n\n      if (startsWith('+', line)) {\n        return [...changedLines, lineNumber]\n      }\n    }\n\n    return changedLines\n  }, [])\n}\n\nexport const getHunksFromDiff = pipe(\n  split('\\n'),\n  splitEveryTime(startsWith('@@')),\n  filter(firstItemStartsWith('@@'))\n)\n\nexport const getChangedLinesFromDiff = pipe(\n  getHunksFromDiff,\n  map(getChangedLinesFromHunk),\n  flatten,\n  uniq\n)\n","import Promise from 'bluebird'\nimport exec from 'execa'\nimport path from 'path'\nimport { CLIEngine } from 'eslint'\nimport {\n  T,\n  assoc,\n  cond,\n  curry,\n  curryN,\n  endsWith,\n  evolve,\n  equals,\n  filter,\n  find,\n  map,\n  objOf,\n  pipe,\n  pipeP,\n  pluck,\n  prop,\n  propEq,\n  split,\n  sum,\n  tap,\n} from 'ramda'\nimport { getChangedLinesFromDiff } from './lib/git'\n\nconst linter = new CLIEngine()\nlet formatter\nlet extensions\n\nconst getChangedFiles = pipeP(\n  commitRange => exec('git', ['diff', commitRange, '--name-only', '--diff-filter=ACMR']),\n  prop('stdout'),\n  split('\\n'),\n  filter(file => extensions.split(',').some(ext => endsWith(ext, file))),\n  map(path.resolve)\n)\n\nconst getDiff = curry((commitRange, filename) =>\n  exec('git', ['diff', commitRange, filename])\n    .then(prop('stdout')))\n\nconst getChangedFileLineMap = curry((commitRange, filePath) => pipeP(\n  getDiff(commitRange),\n  getChangedLinesFromDiff,\n  objOf('changedLines'),\n  assoc('filePath', filePath)\n)(filePath))\n\nconst lintChangedLines = pipe(\n  map(prop('filePath')),\n  linter.executeOnFiles.bind(linter)\n)\n\nconst filterLinterMessages = changedFileLineMap => (linterOutput) => {\n  const filterMessagesByFile = (result) => {\n    const fileLineMap = find(propEq('filePath', result.filePath), changedFileLineMap)\n    const changedLines = prop('changedLines', fileLineMap)\n\n    const filterMessages = evolve({\n      messages: filter(message => changedLines.includes(message.line)),\n    })\n\n    return filterMessages(result)\n  }\n\n  const fixCounts = (result) => {\n    let errorCount = 0\n    let warningCount = 0\n    let fixableErrorCount = 0\n    let fixableWarningCount = 0\n\n    result.messages.forEach((message) => {\n      if (message.fatal || message.severity === 2) {\n        // error\n        errorCount += 1\n        if (message.fix) {\n          fixableErrorCount += 1\n        }\n      } else {\n        // warning\n        warningCount += 1\n        if (message.fix) {\n          fixableWarningCount += 1\n        }\n      }\n    })\n\n    return Object.assign({}, result, {\n      errorCount, warningCount, fixableErrorCount, fixableWarningCount,\n    })\n  }\n\n  return pipe(\n    prop('results'),\n    map(filterMessagesByFile),\n    map(fixCounts),\n    objOf('results')\n  )(linterOutput)\n}\n\nconst applyLinter = changedFileLineMap => pipe(\n  lintChangedLines,\n  filterLinterMessages(changedFileLineMap)\n)(changedFileLineMap)\n\nconst logResults = results => pipe(\n  prop('results'),\n  formatter,\n  console.log\n)(results)\n\nconst getErrorCountFromReport = pipe(\n  prop('results'),\n  pluck('errorCount'),\n  sum\n)\n\nconst exitProcess = curryN(2, n => process.exit(n))\n\nconst reportResults = pipe(\n  tap(logResults),\n  getErrorCountFromReport,\n  cond([\n    [equals(0), exitProcess(0)],\n    [T, exitProcess(1)],\n  ])\n)\n\nconst run = (commitRange = 'HEAD', _extensions = '.js', _formatter) => {\n  formatter = linter.getFormatter(_formatter)\n  extensions = _extensions\n\n  return Promise.resolve(commitRange)\n    .then(getChangedFiles)\n    .map(getChangedFileLineMap(commitRange))\n    .then(applyLinter)\n    .then(reportResults)\n}\n\nexport default run\n","module.exports = require(\"bluebird\");","module.exports = require(\"eslint\");","module.exports = require(\"execa\");","module.exports = require(\"meow\");","module.exports = require(\"path\");","module.exports = require(\"ramda/src/T\");","module.exports = require(\"ramda/src/addIndex\");","module.exports = require(\"ramda/src/assoc\");","module.exports = require(\"ramda/src/complement\");","module.exports = require(\"ramda/src/cond\");","module.exports = require(\"ramda/src/curry\");","module.exports = require(\"ramda/src/curryN\");","module.exports = require(\"ramda/src/defaultTo\");","module.exports = require(\"ramda/src/endsWith\");","module.exports = require(\"ramda/src/equals\");","module.exports = require(\"ramda/src/evolve\");","module.exports = require(\"ramda/src/filter\");","module.exports = require(\"ramda/src/find\");","module.exports = require(\"ramda/src/flatten\");","module.exports = require(\"ramda/src/insert\");","module.exports = require(\"ramda/src/isEmpty\");","module.exports = require(\"ramda/src/map\");","module.exports = require(\"ramda/src/objOf\");","module.exports = require(\"ramda/src/pipe\");","module.exports = require(\"ramda/src/pipeP\");","module.exports = require(\"ramda/src/pluck\");","module.exports = require(\"ramda/src/prop\");","module.exports = require(\"ramda/src/propEq\");","module.exports = require(\"ramda/src/reduce\");","module.exports = require(\"ramda/src/slice\");","module.exports = require(\"ramda/src/split\");","module.exports = require(\"ramda/src/startsWith\");","module.exports = require(\"ramda/src/sum\");","module.exports = require(\"ramda/src/tap\");","module.exports = require(\"ramda/src/uniq\");"],"sourceRoot":""}